package test.codemetrics.spotbugs;


/**
 * This class provides an example how to exclude a file from Spotbugs scan using a pattern-based configuration file. The
 * configuration is in the sub-project "build-tools", in the file
 * {@code src/main/resources/buildconfig/spotbugs-exclude.xml}.
 * <p>
 * Pattern-based exclusions (as opposed to annotation-based exclusions in a particular class) are mostly useful when
 * dealing with classes automatically generated by third-party tools. Usually we can not modify how classes are
 * automatically generated, even if they contain some pattern Spotbugs finds dangerous. It makes little sense to flood
 * scan results with warning we can not do anything about, better to suppress such warnings.
 */
public class SpotbugsPatternExcludeSample {

    private Object obj;


    /**
     * A method which attempts to call {@link Object#hashCode()} on a class variable which was never initialized.
     * Normally this pattern triggers a Spotbugs warning, but in this sample the warning is suppressed by a
     * pattern-based exclusion in the file {@code src/main/resources/buildconfig/spotbugs-exclude.xml}.
     * <p>
     * Note that this method normally triggers two Spotbugs warnings (the same as
     * {@link SpotbugsSample#nullPointerException()}: NP_UNWRITTEN_FIELD and UWF_UNWRITTEN_FIELD. The configuration file
     * referenced above suppresses only the warning NP_UNWRITTEN_FIELD, the second warning is still triggered.
     *
     * @return hash code of an object reference which was never assigned to, actually causing a
     * {@link NullPointerException}.
     */
    public int nullPointerException() {
        return obj.hashCode();
    }
}
